MODULE main
VAR
    stack-op: {push, pop, peek};
    stack-state: {empty, normal, full};
    op-status: {err#empty, err#full, alright};

ASSIGN
    init(stack-state) := empty;
    next(stack-state) := case
        (stack-state = empty  & stack-op = push) : {normal, full};
        (stack-state = full   & stack-op = push) : full;
        (stack-state = empty  & stack-op = pop)  : empty;
        (stack-state = full   & stack-op = pop)  : {normal, empty};
        (stack-state = normal & stack-op = push) : {normal, full};
        (stack-state = normal & stack-op = pop)  : {normal, empty};
        (stack-op = peek) : stack-state;
        TRUE : stack-state;
    esac;
    
    init(op-status) := alright;
    next(op-status) := case
        (stack-state = full   & stack-op = push) : err#full;
        (stack-state = empty  & stack-op = pop)  : err#empty;
        TRUE : alright;
    esac;


CTLSPEC AG (stack-state = full & stack-op = push) -> AG AF (op-status = err#empty);
CTLSPEC AG (stack-state = normal & stack-op = peek -> EX EF stack-state = full);
CTLSPEC (E[stack-state = empty U stack-op = peek] -> stack-state = empty);
CTLSPEC (E[stack-state = empty U stack-op = pop]) -> (stack-state = empty);
CTLSPEC AG EF(E[stack-state = normal U stack-op = peek] -> (stack-state = normal));
CTLSPEC AG EF(stack-state = normal & stack-op = peek) -> (stack-state = normal);